version: "3.8"

networks:
  dev:

services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: app
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - dev

  redis:
    image: redis:7
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    networks:
      - dev

  zookeeper:
    image: bitnami/zookeeper:3
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - dev

  kafka:
    image: bitnami/kafka:3
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    restart: unless-stopped
    networks:
      - dev

  catalog:
    build: /services/catalog
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://app:app@postgres:5432/app?sslmode=disable
      CATALOG_PORT: 8082
    depends_on:
      - postgres
    ports:
      - "8082:8082"
    networks:
      - dev

  order:
    build: /services/order
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://app:app@postgres:5432/app?sslmode=disable
      ORDER_PORT: 8083
      CATALOG_URL: http://catalog:8082
    depends_on:
      - postgres
      - catalog
    ports:
      - "8083:8083"
    networks:
      - dev

  frontend:
    build: /frontend
    depends_on:
      - order
      - catalog
    networks:
      - dev

  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
    volumes:
      - './nginx.conf:/etc/nginx/nginx.conf'
    depends_on:
      - frontend
      - order
      - catalog
    networks:
      - dev

volumes:
  pgdata:
  redisdata:
